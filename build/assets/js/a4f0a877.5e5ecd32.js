"use strict";(self.webpackChunkmy_website_001=self.webpackChunkmy_website_001||[]).push([[44],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return d}});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||o;return n?t.createElement(m,i(i({ref:r},c),{},{components:n})):t.createElement(m,i({ref:r},c))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},84461:function(e,r,n){n.r(r),n.d(r,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return f}});var t=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"NovoRender.LinearTransform",title:"Interface: LinearTransform",sidebar_label:"LinearTransform",custom_edit_url:null},s=void 0,p={unversionedId:"webgl-api/interfaces/NovoRender.LinearTransform",id:"webgl-api/interfaces/NovoRender.LinearTransform",title:"Interface: LinearTransform",description:"NovoRender.LinearTransform",source:"@site/docs/webgl-api/interfaces/NovoRender.LinearTransform.md",sourceDirName:"webgl-api/interfaces",slug:"/webgl-api/interfaces/NovoRender.LinearTransform",permalink:"/docs/webgl-api/interfaces/NovoRender.LinearTransform",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"NovoRender.LinearTransform",title:"Interface: LinearTransform",sidebar_label:"LinearTransform",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"LineValues",permalink:"/docs/webgl-api/interfaces/NovoRender.LineValues"},next:{title:"MeasureAPI",permalink:"/docs/webgl-api/interfaces/NovoRender.MeasureAPI"}},c={},f=[{value:"Properties",id:"properties",level:2},{value:"offset",id:"offset",level:3},{value:"scale",id:"scale",level:3}],u={toc:f};function d(e){var r=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/webgl-api/namespaces/NovoRender"},"NovoRender"),".LinearTransform"),(0,o.kt)("p",null,"Linear transform options."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"remarks")),"\nThe transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.\nIf scale = 0, offset will effectively replace input value."),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"offset"},"offset"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,o.kt)("strong",{parentName:"p"},"offset"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"number")),(0,o.kt)("p",null,"Addend for scaled input value. Default = 0."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"scale"},"scale"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,o.kt)("strong",{parentName:"p"},"scale"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"number")),(0,o.kt)("p",null,"Multiplicand for input value. Default = 1."))}d.isMDXComponent=!0}}]);